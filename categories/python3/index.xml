<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python3 on Seiri&#39;s Blog</title>
    <link>https://seiri.blog/categories/python3/</link>
    <description>Recent content in python3 on Seiri&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2023 Seiri All rights reserved</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 19:21:37 +0900</lastBuildDate><atom:link href="https://seiri.blog/categories/python3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pythonで日本の新型コロナ患者情報取得</title>
      <link>https://seiri.blog/posts/python-corona-patient-info-in-japanese/</link>
      <pubDate>Tue, 18 Jan 2022 19:21:37 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/python-corona-patient-info-in-japanese/</guid>
      <description>環境 Win10 python 3.8.10 ・requests==2.25.1 ・pandas==1.3.1 実装 import requests as rq import pandas as pd url = &amp;#39;https://covid19-japan-web-api.vercel.app/api/v1/positives?prefecture={0}&amp;#39; prefectures = [&amp;#39;北海道&amp;#39;,&amp;#39</description>
    </item>
    
    <item>
      <title>【AWS】LambdaでS3ファイルをtmpディレクトリに保存</title>
      <link>https://seiri.blog/posts/aws-lambda-by-s3-file-tmp-directory-save/</link>
      <pubDate>Mon, 27 Dec 2021 16:14:46 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-by-s3-file-tmp-directory-save/</guid>
      <description>tmp ディレクトリ説明 各実行環境は、/tmp ディレクトリ内の 512 MB~ 10240 MB のディスク領域を提供します。ディレクトリのコンテンツは、実行環境が停止された</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ユーザ操作Util</title>
      <link>https://seiri.blog/posts/aws-lambda-common-user-operation-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:38:54 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-common-user-operation-util-in-python/</guid>
      <description>目的 boto3 ラブライブを利用して、AWS Coginit での操作 Utitl 作成方法を共有します。 実装 # -*- coding: utf-8 -*- import secrets import string import boto3 USERPOOL_ID = &amp;#39;USERPOOL_ID&amp;#39; client = boto3.client(&amp;#39;cognito-idp&amp;#39;) def show_user_list(): &amp;#34;&amp;#34;&amp;#34;</description>
    </item>
    
    <item>
      <title>PythonでStepFunctionを実行する方法(boto3)</title>
      <link>https://seiri.blog/posts/python-execute-stepfunction/</link>
      <pubDate>Mon, 27 Dec 2021 12:18:23 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/python-execute-stepfunction/</guid>
      <description>実装方法 Python の boto3 ライブラリを使用して AWS Step Functions を実行するには、以下の手順に従います。 boto3 モジュールをインポートします。 import boto3 Step Functions クライアントを作成しま</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambdaキュー送信</title>
      <link>https://seiri.blog/posts/aws-lambda-queue-send-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:15:01 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-queue-send-in-python/</guid>
      <description>実装 # -*- coding: utf-8 -*- import boto3 sqs_client = boto3.client(&amp;#39;sqs&amp;#39;) def push_message(message_body): &amp;#34;&amp;#34;&amp;#34;SQSの特定キューにメッセージをPUSHする Args: message_body: PUSHするメッセージ Returns: sqsメッ</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通ログ出力Util</title>
      <link>https://seiri.blog/posts/aws-lambda-common-logging-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 12:06:59 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-common-logging-util-in-python/</guid>
      <description>実装 # -*- coding: utf-8 -*- import logging import sys from datetime import datetime from pytz import timezone def _customTime(*args): &amp;#34;&amp;#34;&amp;#34;ログ用の時間出力 Returns: 現在時間（Asia/Tokyo） &amp;#34;&amp;#34;&amp;#34; return datetime.now(timezone(&amp;#39;Asia/Tokyo&amp;#39;)).timetuple() LOG_LEVEL = &amp;#39;INFO&amp;#39; _logger = logging.getLogger(__name__)</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda 共通認証Util</title>
      <link>https://seiri.blog/posts/aws-lambda-common-authorization-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:54:25 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-common-authorization-util-in-python/</guid>
      <description>実装 # -*- coding: utf-8 -*- import base64 import boto3 import json cognito_client = boto3.client(&amp;#39;cognito-idp&amp;#39;) cognito_identity_client = boto3.client(&amp;#39;cognito-identity&amp;#39;) USERPOOL_ID = &amp;#39;USERPOOL_ID&amp;#39; CLIENT_ID = &amp;#39;CLIENT_ID&amp;#39; IDENTITYPOOL_ID = &amp;#39;IDENTITYPOOL_ID&amp;#39; def authenticate(user_id, password): &amp;#34;&amp;#34;&amp;#34;指定されたユーザIDとパスワードで認証を実施する</description>
    </item>
    
    <item>
      <title>PythonでのAWS Lambda共通レスポンスUtil</title>
      <link>https://seiri.blog/posts/aws-lambda-common-response-util-in-python/</link>
      <pubDate>Mon, 27 Dec 2021 11:22:36 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/aws-lambda-common-response-util-in-python/</guid>
      <description>目的 python での Lambda 関数共通レスポンス Util を作成方法を共有します。 実装 import decimal import json class DecimalEncoder(json.JSONEncoder): &amp;#34;&amp;#34;&amp;#34;DecimalEncoder クラス Decimal クラスを使用して保存された数値を出力するために使用されます</description>
    </item>
    
    <item>
      <title>Pythonでのデータ埋める方法</title>
      <link>https://seiri.blog/posts/python-fill-data/</link>
      <pubDate>Thu, 23 Dec 2021 12:51:07 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/python-fill-data/</guid>
      <description>実装例 def padding_formatter(item, padding, data_type): &amp;#34;&amp;#34;&amp;#34; 引数で指定された桁数までデータを埋める 埋める内容は以下の通り ・データ型[numeric: 数字] 先頭0埋め ・データ型[half</description>
    </item>
    
    <item>
      <title>PythonでのDBSessionクラス</title>
      <link>https://seiri.blog/posts/python-dbsession-class/</link>
      <pubDate>Thu, 23 Dec 2021 12:38:42 +0900</pubDate>
      
      <guid>https://seiri.blog/posts/python-dbsession-class/</guid>
      <description>SQLAlchemy とは SQLAlchemy とは、python の中では最もよく利用されている ORM の一つです。 ORM 以外にも以下の機能を持ちます。 1.データベースへの接続、SQL の実行</description>
    </item>
    
  </channel>
</rss>
